/* Generated By:JavaCC: Do not edit this line. MyParser.java */
import helpers.*;
import java.util.*;
public class MyParser implements MyParserConstants {

    static int nextQuad;
    static ArrayList<Quad> quads;
    static Stack<String> stack;
    static SymTab symtab;
    /** Main entry point. */
    public static void main(String args[]) throws ParseException {
        nextQuad = 0;
        quads = new ArrayList<Quad>();
        stack = new Stack<String>();
        symtab = new SymTab();
        MyParser parser = new MyParser(System.in);
        parser.Program();
        printQuads();
    }

    public static void genQuad(String cmd, String op1, String op2, String dest){
        Quad quad = new Quad(cmd, op1, op2, dest);
        System.out.println(quad.toString());
        quads.add(quad);
        nextQuad++;
    }
    public static void backpatch(int index, int target){
        if(index == 0)
            return;
        int temp = Integer.parseInt(quads.get(index).dest);
        quads.get(index).dest = ""+target;
        backpatch(temp, target);
    }

    public static void printStack(){
        System.out.println("STACK:");
        for(int i = 0; i<stack.size(); i++){
            System.out.println(stack.get(i));
        }
    }
    public static void printQuads(){
        for(int i = 0; i<quads.size(); i++){
            System.out.println(quads.get(i).toString());
        }
    }

/** Top level production. */
  static final public void Program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case LOOP:
      case IF:
      case EXIT:
      case GET:
      case PUT:
      case Id:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Statement();
    }
    jj_consume_token(0);
  }

  static final public void Statement() throws ParseException {
    String a;
    String b;
    if (jj_2_1(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Id:
        LabelID();
        jj_consume_token(21);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
        Expression();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(LOOP);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case LOOP:
        case IF:
        case EXIT:
        case GET:
        case PUT:
        case Id:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        Statement();
      }
      jj_consume_token(END);
      jj_consume_token(LOOP);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        jj_consume_token(IF);
        Expression();
        a = stack.pop();
        genQuad("jeqz",a,"","0");
        stack.push(Integer.toString(nextQuad));
        // printStack();

        jj_consume_token(THEN);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHILE:
          case LOOP:
          case IF:
          case EXIT:
          case GET:
          case PUT:
          case Id:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          Statement();
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSIF:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_4;
          }
          jj_consume_token(ELSIF);
        a=stack.pop();
        quads.get(Integer.parseInt(a)).dest=Integer.toString(nextQuad);
          Expression();
        a = stack.pop();
        genQuad("jeqz",a,"","0");
        stack.push(Integer.toString(nextQuad));
        // printStack();

          jj_consume_token(THEN);
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case WHILE:
            case LOOP:
            case IF:
            case EXIT:
            case GET:
            case PUT:
            case Id:
              ;
              break;
            default:
              jj_la1[6] = jj_gen;
              break label_5;
            }
            Statement();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
        a=stack.pop();
        System.out.println(a);
        stack.push(Integer.toString(nextQuad));
        genQuad("jump","","","0");
        quads.get(Integer.parseInt(a)-1).dest=Integer.toString(nextQuad);
        printStack();
        printQuads();
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case WHILE:
            case LOOP:
            case IF:
            case EXIT:
            case GET:
            case PUT:
            case Id:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              break label_6;
            }
            Statement();
          }
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        a=stack.pop();
        // printStack();
        quads.get(Integer.parseInt(a)-1).dest=Integer.toString(nextQuad);
        printQuads();
        jj_consume_token(END);
        jj_consume_token(IF);
        break;
      case Id:
        a = Id();
        Symbol temp = symtab.table.get(a);
        stack.push(a);
        // printStack();

        jj_consume_token(22);
        Expression();
        a=stack.pop();
        b=stack.pop();
        // printStack();
        genQuad(":=", a, "", b);
        break;
      case EXIT:
        jj_consume_token(EXIT);
        LabelID();
        break;
      case GET:
        jj_consume_token(GET);
        jj_consume_token(23);
        InputList();
        jj_consume_token(24);
        break;
      case PUT:
        jj_consume_token(PUT);
        jj_consume_token(23);
        OutputList();
        jj_consume_token(24);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(25);
                                       printStack();
  }

  static final public void LabelID() throws ParseException {
    Id();
  }

  static final public void InputList() throws ParseException {
    Id();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      jj_consume_token(26);
      Id();
    }
  }

  static final public void OutputList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case String:
      jj_consume_token(String);
      break;
    case SQRT:
    case ABS:
    case Id:
    case Int:
    case 23:
    case 35:
    case 36:
    case 39:
      Expression();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      jj_consume_token(26);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case String:
        jj_consume_token(String);
        break;
      case SQRT:
      case ABS:
      case Id:
      case Int:
      case 23:
      case 35:
      case 36:
      case 39:
        Expression();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Expression() throws ParseException {
    String a;
    String b;
    String c;
    And();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      jj_consume_token(27);
      And();
        a = stack.pop();
        b = stack.pop();
        c = symtab.newTemp();
        genQuad("|", b, a, c);
        stack.push(c);
        // printStack();

    }
  }

  static final public void And() throws ParseException {
    String a;
    String b;
    String c;
    Rel();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_10;
      }
      jj_consume_token(28);
      Rel();
        a = stack.pop();
        b = stack.pop();
        c  = symtab.newTemp();
        genQuad("&", b, a, c);
        stack.push(c);
        // printStack();

    }
  }

  static final public void Rel() throws ParseException {
    String op;
    String a;
    String b;
    String c;
    Term();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_11;
      }
      op = RelOp();
      Term();
        a = stack.pop();
        b = stack.pop();
        c = symtab.newTemp();
        genQuad(op,b,a,c);
        stack.push(c);
        // printStack();

    }
  }

  static final public String RelOp() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      t = jj_consume_token(29);
      break;
    case 30:
      t = jj_consume_token(30);
      break;
    case 31:
      t = jj_consume_token(31);
      break;
    case 32:
      t = jj_consume_token(32);
      break;
    case 33:
      t = jj_consume_token(33);
      break;
    case 34:
      t = jj_consume_token(34);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void Term() throws ParseException {
    String a;
    String b;
    String c;
    String op;
    Factor();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
      case 36:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_12;
      }
      op = AddOp();
      Factor();
        a=stack.pop();
        b=stack.pop();
        c=symtab.newTemp();
        genQuad(op,b,a,c);
        stack.push(c);
        // printStack();

    }
  }

  static final public String AddOp() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      t = jj_consume_token(35);
      break;
    case 36:
      t = jj_consume_token(36);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void Factor() throws ParseException {
    String a;
    String b;
    String c;
    String op;
    Primary();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
      case 38:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_13;
      }
      op = MulOp();
      Primary();
        a =stack.pop();
        b =stack.pop();
        c = symtab.newTemp();
        genQuad(op, b, a, c);
        stack.push(c);
        // printStack();

    }
  }

  static final public String MulOp() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
      t = jj_consume_token(37);
      break;
    case 38:
      t = jj_consume_token(38);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void Primary() throws ParseException {
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
      case 36:
      case 39:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_14;
      }
      UnaryOp();
    }
    Unit();
  }

  static final public void UnaryOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      jj_consume_token(35);
      break;
    case 36:
      jj_consume_token(36);
      break;
    case 39:
      jj_consume_token(39);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Unit() throws ParseException {
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
    case Int:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Id:
        s = Id();
        break;
      case Int:
        s = Int();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
         stack.push(s);
        //  printStack();

      break;
    case SQRT:
    case ABS:
    case 23:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQRT:
      case ABS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SQRT:
          jj_consume_token(SQRT);
          break;
        case ABS:
          jj_consume_token(ABS);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(23);
      Expression();
      jj_consume_token(24);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public String Id() throws ParseException {
  Token t;String s;
    t = jj_consume_token(Id);
        s = (String)t.image;
        if(symtab.table.get(s)==null){
            Symbol temp = new Symbol(s, "int");
            symtab.table.put(s, temp);
        }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String Int() throws ParseException {
  Token t;String s;
    t = jj_consume_token(Int);
        s = (String)t.image;
        if(symtab.table.get(s)==null){
            Symbol temp = new Symbol(s, "int");
            symtab.table.put(s, temp);
        }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(Int)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(21)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_scan_token(LOOP)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_17()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(PUT)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(GET)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(EXIT)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4e1c0,0x40000,0x40,0x4e1c0,0x4e1c0,0x400,0x4e1c0,0x4e1c0,0x800,0x4e100,0x4000000,0x9f0000,0x4000000,0x9f0000,0x8000000,0x10000000,0xe0000000,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000,0x30000,0x30000,0x8f0000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x98,0x0,0x98,0x0,0x0,0x7,0x7,0x18,0x18,0x60,0x60,0x98,0x98,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
